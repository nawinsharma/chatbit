
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `GroupUsers` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model GroupUsers
 * 
 */
export type GroupUsersModel = runtime.Types.Result.DefaultSelection<Prisma.$GroupUsersPayload>

export type AggregateGroupUsers = {
  _count: GroupUsersCountAggregateOutputType | null
  _avg: GroupUsersAvgAggregateOutputType | null
  _sum: GroupUsersSumAggregateOutputType | null
  _min: GroupUsersMinAggregateOutputType | null
  _max: GroupUsersMaxAggregateOutputType | null
}

export type GroupUsersAvgAggregateOutputType = {
  id: number | null
}

export type GroupUsersSumAggregateOutputType = {
  id: number | null
}

export type GroupUsersMinAggregateOutputType = {
  id: number | null
  group_id: string | null
  name: string | null
  created_at: Date | null
}

export type GroupUsersMaxAggregateOutputType = {
  id: number | null
  group_id: string | null
  name: string | null
  created_at: Date | null
}

export type GroupUsersCountAggregateOutputType = {
  id: number
  group_id: number
  name: number
  created_at: number
  _all: number
}


export type GroupUsersAvgAggregateInputType = {
  id?: true
}

export type GroupUsersSumAggregateInputType = {
  id?: true
}

export type GroupUsersMinAggregateInputType = {
  id?: true
  group_id?: true
  name?: true
  created_at?: true
}

export type GroupUsersMaxAggregateInputType = {
  id?: true
  group_id?: true
  name?: true
  created_at?: true
}

export type GroupUsersCountAggregateInputType = {
  id?: true
  group_id?: true
  name?: true
  created_at?: true
  _all?: true
}

export type GroupUsersAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GroupUsers to aggregate.
   */
  where?: Prisma.GroupUsersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GroupUsers to fetch.
   */
  orderBy?: Prisma.GroupUsersOrderByWithRelationInput | Prisma.GroupUsersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GroupUsersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GroupUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GroupUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned GroupUsers
  **/
  _count?: true | GroupUsersCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: GroupUsersAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: GroupUsersSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GroupUsersMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GroupUsersMaxAggregateInputType
}

export type GetGroupUsersAggregateType<T extends GroupUsersAggregateArgs> = {
      [P in keyof T & keyof AggregateGroupUsers]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGroupUsers[P]>
    : Prisma.GetScalarType<T[P], AggregateGroupUsers[P]>
}




export type GroupUsersGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GroupUsersWhereInput
  orderBy?: Prisma.GroupUsersOrderByWithAggregationInput | Prisma.GroupUsersOrderByWithAggregationInput[]
  by: Prisma.GroupUsersScalarFieldEnum[] | Prisma.GroupUsersScalarFieldEnum
  having?: Prisma.GroupUsersScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GroupUsersCountAggregateInputType | true
  _avg?: GroupUsersAvgAggregateInputType
  _sum?: GroupUsersSumAggregateInputType
  _min?: GroupUsersMinAggregateInputType
  _max?: GroupUsersMaxAggregateInputType
}

export type GroupUsersGroupByOutputType = {
  id: number
  group_id: string
  name: string
  created_at: Date
  _count: GroupUsersCountAggregateOutputType | null
  _avg: GroupUsersAvgAggregateOutputType | null
  _sum: GroupUsersSumAggregateOutputType | null
  _min: GroupUsersMinAggregateOutputType | null
  _max: GroupUsersMaxAggregateOutputType | null
}

type GetGroupUsersGroupByPayload<T extends GroupUsersGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GroupUsersGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GroupUsersGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GroupUsersGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GroupUsersGroupByOutputType[P]>
      }
    >
  > 



export type GroupUsersWhereInput = {
  AND?: Prisma.GroupUsersWhereInput | Prisma.GroupUsersWhereInput[]
  OR?: Prisma.GroupUsersWhereInput[]
  NOT?: Prisma.GroupUsersWhereInput | Prisma.GroupUsersWhereInput[]
  id?: Prisma.IntFilter<"GroupUsers"> | number
  group_id?: Prisma.UuidFilter<"GroupUsers"> | string
  name?: Prisma.StringFilter<"GroupUsers"> | string
  created_at?: Prisma.DateTimeFilter<"GroupUsers"> | Date | string
  group?: Prisma.XOR<Prisma.ChatGroupScalarRelationFilter, Prisma.ChatGroupWhereInput>
}

export type GroupUsersOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  group_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  group?: Prisma.ChatGroupOrderByWithRelationInput
}

export type GroupUsersWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  group_id_name?: Prisma.GroupUsersGroup_idNameCompoundUniqueInput
  AND?: Prisma.GroupUsersWhereInput | Prisma.GroupUsersWhereInput[]
  OR?: Prisma.GroupUsersWhereInput[]
  NOT?: Prisma.GroupUsersWhereInput | Prisma.GroupUsersWhereInput[]
  group_id?: Prisma.UuidFilter<"GroupUsers"> | string
  name?: Prisma.StringFilter<"GroupUsers"> | string
  created_at?: Prisma.DateTimeFilter<"GroupUsers"> | Date | string
  group?: Prisma.XOR<Prisma.ChatGroupScalarRelationFilter, Prisma.ChatGroupWhereInput>
}, "id" | "group_id_name">

export type GroupUsersOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  group_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  _count?: Prisma.GroupUsersCountOrderByAggregateInput
  _avg?: Prisma.GroupUsersAvgOrderByAggregateInput
  _max?: Prisma.GroupUsersMaxOrderByAggregateInput
  _min?: Prisma.GroupUsersMinOrderByAggregateInput
  _sum?: Prisma.GroupUsersSumOrderByAggregateInput
}

export type GroupUsersScalarWhereWithAggregatesInput = {
  AND?: Prisma.GroupUsersScalarWhereWithAggregatesInput | Prisma.GroupUsersScalarWhereWithAggregatesInput[]
  OR?: Prisma.GroupUsersScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GroupUsersScalarWhereWithAggregatesInput | Prisma.GroupUsersScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"GroupUsers"> | number
  group_id?: Prisma.UuidWithAggregatesFilter<"GroupUsers"> | string
  name?: Prisma.StringWithAggregatesFilter<"GroupUsers"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"GroupUsers"> | Date | string
}

export type GroupUsersCreateInput = {
  name: string
  created_at?: Date | string
  group: Prisma.ChatGroupCreateNestedOneWithoutGroupUsersInput
}

export type GroupUsersUncheckedCreateInput = {
  id?: number
  group_id: string
  name: string
  created_at?: Date | string
}

export type GroupUsersUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  group?: Prisma.ChatGroupUpdateOneRequiredWithoutGroupUsersNestedInput
}

export type GroupUsersUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  group_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GroupUsersCreateManyInput = {
  id?: number
  group_id: string
  name: string
  created_at?: Date | string
}

export type GroupUsersUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GroupUsersUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  group_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GroupUsersListRelationFilter = {
  every?: Prisma.GroupUsersWhereInput
  some?: Prisma.GroupUsersWhereInput
  none?: Prisma.GroupUsersWhereInput
}

export type GroupUsersOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type GroupUsersGroup_idNameCompoundUniqueInput = {
  group_id: string
  name: string
}

export type GroupUsersCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  group_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type GroupUsersAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type GroupUsersMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  group_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type GroupUsersMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  group_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type GroupUsersSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type GroupUsersCreateNestedManyWithoutGroupInput = {
  create?: Prisma.XOR<Prisma.GroupUsersCreateWithoutGroupInput, Prisma.GroupUsersUncheckedCreateWithoutGroupInput> | Prisma.GroupUsersCreateWithoutGroupInput[] | Prisma.GroupUsersUncheckedCreateWithoutGroupInput[]
  connectOrCreate?: Prisma.GroupUsersCreateOrConnectWithoutGroupInput | Prisma.GroupUsersCreateOrConnectWithoutGroupInput[]
  createMany?: Prisma.GroupUsersCreateManyGroupInputEnvelope
  connect?: Prisma.GroupUsersWhereUniqueInput | Prisma.GroupUsersWhereUniqueInput[]
}

export type GroupUsersUncheckedCreateNestedManyWithoutGroupInput = {
  create?: Prisma.XOR<Prisma.GroupUsersCreateWithoutGroupInput, Prisma.GroupUsersUncheckedCreateWithoutGroupInput> | Prisma.GroupUsersCreateWithoutGroupInput[] | Prisma.GroupUsersUncheckedCreateWithoutGroupInput[]
  connectOrCreate?: Prisma.GroupUsersCreateOrConnectWithoutGroupInput | Prisma.GroupUsersCreateOrConnectWithoutGroupInput[]
  createMany?: Prisma.GroupUsersCreateManyGroupInputEnvelope
  connect?: Prisma.GroupUsersWhereUniqueInput | Prisma.GroupUsersWhereUniqueInput[]
}

export type GroupUsersUpdateManyWithoutGroupNestedInput = {
  create?: Prisma.XOR<Prisma.GroupUsersCreateWithoutGroupInput, Prisma.GroupUsersUncheckedCreateWithoutGroupInput> | Prisma.GroupUsersCreateWithoutGroupInput[] | Prisma.GroupUsersUncheckedCreateWithoutGroupInput[]
  connectOrCreate?: Prisma.GroupUsersCreateOrConnectWithoutGroupInput | Prisma.GroupUsersCreateOrConnectWithoutGroupInput[]
  upsert?: Prisma.GroupUsersUpsertWithWhereUniqueWithoutGroupInput | Prisma.GroupUsersUpsertWithWhereUniqueWithoutGroupInput[]
  createMany?: Prisma.GroupUsersCreateManyGroupInputEnvelope
  set?: Prisma.GroupUsersWhereUniqueInput | Prisma.GroupUsersWhereUniqueInput[]
  disconnect?: Prisma.GroupUsersWhereUniqueInput | Prisma.GroupUsersWhereUniqueInput[]
  delete?: Prisma.GroupUsersWhereUniqueInput | Prisma.GroupUsersWhereUniqueInput[]
  connect?: Prisma.GroupUsersWhereUniqueInput | Prisma.GroupUsersWhereUniqueInput[]
  update?: Prisma.GroupUsersUpdateWithWhereUniqueWithoutGroupInput | Prisma.GroupUsersUpdateWithWhereUniqueWithoutGroupInput[]
  updateMany?: Prisma.GroupUsersUpdateManyWithWhereWithoutGroupInput | Prisma.GroupUsersUpdateManyWithWhereWithoutGroupInput[]
  deleteMany?: Prisma.GroupUsersScalarWhereInput | Prisma.GroupUsersScalarWhereInput[]
}

export type GroupUsersUncheckedUpdateManyWithoutGroupNestedInput = {
  create?: Prisma.XOR<Prisma.GroupUsersCreateWithoutGroupInput, Prisma.GroupUsersUncheckedCreateWithoutGroupInput> | Prisma.GroupUsersCreateWithoutGroupInput[] | Prisma.GroupUsersUncheckedCreateWithoutGroupInput[]
  connectOrCreate?: Prisma.GroupUsersCreateOrConnectWithoutGroupInput | Prisma.GroupUsersCreateOrConnectWithoutGroupInput[]
  upsert?: Prisma.GroupUsersUpsertWithWhereUniqueWithoutGroupInput | Prisma.GroupUsersUpsertWithWhereUniqueWithoutGroupInput[]
  createMany?: Prisma.GroupUsersCreateManyGroupInputEnvelope
  set?: Prisma.GroupUsersWhereUniqueInput | Prisma.GroupUsersWhereUniqueInput[]
  disconnect?: Prisma.GroupUsersWhereUniqueInput | Prisma.GroupUsersWhereUniqueInput[]
  delete?: Prisma.GroupUsersWhereUniqueInput | Prisma.GroupUsersWhereUniqueInput[]
  connect?: Prisma.GroupUsersWhereUniqueInput | Prisma.GroupUsersWhereUniqueInput[]
  update?: Prisma.GroupUsersUpdateWithWhereUniqueWithoutGroupInput | Prisma.GroupUsersUpdateWithWhereUniqueWithoutGroupInput[]
  updateMany?: Prisma.GroupUsersUpdateManyWithWhereWithoutGroupInput | Prisma.GroupUsersUpdateManyWithWhereWithoutGroupInput[]
  deleteMany?: Prisma.GroupUsersScalarWhereInput | Prisma.GroupUsersScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type GroupUsersCreateWithoutGroupInput = {
  name: string
  created_at?: Date | string
}

export type GroupUsersUncheckedCreateWithoutGroupInput = {
  id?: number
  name: string
  created_at?: Date | string
}

export type GroupUsersCreateOrConnectWithoutGroupInput = {
  where: Prisma.GroupUsersWhereUniqueInput
  create: Prisma.XOR<Prisma.GroupUsersCreateWithoutGroupInput, Prisma.GroupUsersUncheckedCreateWithoutGroupInput>
}

export type GroupUsersCreateManyGroupInputEnvelope = {
  data: Prisma.GroupUsersCreateManyGroupInput | Prisma.GroupUsersCreateManyGroupInput[]
  skipDuplicates?: boolean
}

export type GroupUsersUpsertWithWhereUniqueWithoutGroupInput = {
  where: Prisma.GroupUsersWhereUniqueInput
  update: Prisma.XOR<Prisma.GroupUsersUpdateWithoutGroupInput, Prisma.GroupUsersUncheckedUpdateWithoutGroupInput>
  create: Prisma.XOR<Prisma.GroupUsersCreateWithoutGroupInput, Prisma.GroupUsersUncheckedCreateWithoutGroupInput>
}

export type GroupUsersUpdateWithWhereUniqueWithoutGroupInput = {
  where: Prisma.GroupUsersWhereUniqueInput
  data: Prisma.XOR<Prisma.GroupUsersUpdateWithoutGroupInput, Prisma.GroupUsersUncheckedUpdateWithoutGroupInput>
}

export type GroupUsersUpdateManyWithWhereWithoutGroupInput = {
  where: Prisma.GroupUsersScalarWhereInput
  data: Prisma.XOR<Prisma.GroupUsersUpdateManyMutationInput, Prisma.GroupUsersUncheckedUpdateManyWithoutGroupInput>
}

export type GroupUsersScalarWhereInput = {
  AND?: Prisma.GroupUsersScalarWhereInput | Prisma.GroupUsersScalarWhereInput[]
  OR?: Prisma.GroupUsersScalarWhereInput[]
  NOT?: Prisma.GroupUsersScalarWhereInput | Prisma.GroupUsersScalarWhereInput[]
  id?: Prisma.IntFilter<"GroupUsers"> | number
  group_id?: Prisma.UuidFilter<"GroupUsers"> | string
  name?: Prisma.StringFilter<"GroupUsers"> | string
  created_at?: Prisma.DateTimeFilter<"GroupUsers"> | Date | string
}

export type GroupUsersCreateManyGroupInput = {
  id?: number
  name: string
  created_at?: Date | string
}

export type GroupUsersUpdateWithoutGroupInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GroupUsersUncheckedUpdateWithoutGroupInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GroupUsersUncheckedUpdateManyWithoutGroupInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type GroupUsersSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  group_id?: boolean
  name?: boolean
  created_at?: boolean
  group?: boolean | Prisma.ChatGroupDefaultArgs<ExtArgs>
}, ExtArgs["result"]["groupUsers"]>

export type GroupUsersSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  group_id?: boolean
  name?: boolean
  created_at?: boolean
  group?: boolean | Prisma.ChatGroupDefaultArgs<ExtArgs>
}, ExtArgs["result"]["groupUsers"]>

export type GroupUsersSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  group_id?: boolean
  name?: boolean
  created_at?: boolean
  group?: boolean | Prisma.ChatGroupDefaultArgs<ExtArgs>
}, ExtArgs["result"]["groupUsers"]>

export type GroupUsersSelectScalar = {
  id?: boolean
  group_id?: boolean
  name?: boolean
  created_at?: boolean
}

export type GroupUsersOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "group_id" | "name" | "created_at", ExtArgs["result"]["groupUsers"]>
export type GroupUsersInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  group?: boolean | Prisma.ChatGroupDefaultArgs<ExtArgs>
}
export type GroupUsersIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  group?: boolean | Prisma.ChatGroupDefaultArgs<ExtArgs>
}
export type GroupUsersIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  group?: boolean | Prisma.ChatGroupDefaultArgs<ExtArgs>
}

export type $GroupUsersPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "GroupUsers"
  objects: {
    group: Prisma.$ChatGroupPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    group_id: string
    name: string
    created_at: Date
  }, ExtArgs["result"]["groupUsers"]>
  composites: {}
}

export type GroupUsersGetPayload<S extends boolean | null | undefined | GroupUsersDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GroupUsersPayload, S>

export type GroupUsersCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GroupUsersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GroupUsersCountAggregateInputType | true
  }

export interface GroupUsersDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GroupUsers'], meta: { name: 'GroupUsers' } }
  /**
   * Find zero or one GroupUsers that matches the filter.
   * @param {GroupUsersFindUniqueArgs} args - Arguments to find a GroupUsers
   * @example
   * // Get one GroupUsers
   * const groupUsers = await prisma.groupUsers.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GroupUsersFindUniqueArgs>(args: Prisma.SelectSubset<T, GroupUsersFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GroupUsersClient<runtime.Types.Result.GetResult<Prisma.$GroupUsersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one GroupUsers that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GroupUsersFindUniqueOrThrowArgs} args - Arguments to find a GroupUsers
   * @example
   * // Get one GroupUsers
   * const groupUsers = await prisma.groupUsers.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GroupUsersFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GroupUsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GroupUsersClient<runtime.Types.Result.GetResult<Prisma.$GroupUsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GroupUsers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupUsersFindFirstArgs} args - Arguments to find a GroupUsers
   * @example
   * // Get one GroupUsers
   * const groupUsers = await prisma.groupUsers.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GroupUsersFindFirstArgs>(args?: Prisma.SelectSubset<T, GroupUsersFindFirstArgs<ExtArgs>>): Prisma.Prisma__GroupUsersClient<runtime.Types.Result.GetResult<Prisma.$GroupUsersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GroupUsers that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupUsersFindFirstOrThrowArgs} args - Arguments to find a GroupUsers
   * @example
   * // Get one GroupUsers
   * const groupUsers = await prisma.groupUsers.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GroupUsersFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GroupUsersFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GroupUsersClient<runtime.Types.Result.GetResult<Prisma.$GroupUsersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more GroupUsers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupUsersFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all GroupUsers
   * const groupUsers = await prisma.groupUsers.findMany()
   * 
   * // Get first 10 GroupUsers
   * const groupUsers = await prisma.groupUsers.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const groupUsersWithIdOnly = await prisma.groupUsers.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GroupUsersFindManyArgs>(args?: Prisma.SelectSubset<T, GroupUsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GroupUsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a GroupUsers.
   * @param {GroupUsersCreateArgs} args - Arguments to create a GroupUsers.
   * @example
   * // Create one GroupUsers
   * const GroupUsers = await prisma.groupUsers.create({
   *   data: {
   *     // ... data to create a GroupUsers
   *   }
   * })
   * 
   */
  create<T extends GroupUsersCreateArgs>(args: Prisma.SelectSubset<T, GroupUsersCreateArgs<ExtArgs>>): Prisma.Prisma__GroupUsersClient<runtime.Types.Result.GetResult<Prisma.$GroupUsersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many GroupUsers.
   * @param {GroupUsersCreateManyArgs} args - Arguments to create many GroupUsers.
   * @example
   * // Create many GroupUsers
   * const groupUsers = await prisma.groupUsers.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GroupUsersCreateManyArgs>(args?: Prisma.SelectSubset<T, GroupUsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many GroupUsers and returns the data saved in the database.
   * @param {GroupUsersCreateManyAndReturnArgs} args - Arguments to create many GroupUsers.
   * @example
   * // Create many GroupUsers
   * const groupUsers = await prisma.groupUsers.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many GroupUsers and only return the `id`
   * const groupUsersWithIdOnly = await prisma.groupUsers.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GroupUsersCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GroupUsersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GroupUsersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a GroupUsers.
   * @param {GroupUsersDeleteArgs} args - Arguments to delete one GroupUsers.
   * @example
   * // Delete one GroupUsers
   * const GroupUsers = await prisma.groupUsers.delete({
   *   where: {
   *     // ... filter to delete one GroupUsers
   *   }
   * })
   * 
   */
  delete<T extends GroupUsersDeleteArgs>(args: Prisma.SelectSubset<T, GroupUsersDeleteArgs<ExtArgs>>): Prisma.Prisma__GroupUsersClient<runtime.Types.Result.GetResult<Prisma.$GroupUsersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one GroupUsers.
   * @param {GroupUsersUpdateArgs} args - Arguments to update one GroupUsers.
   * @example
   * // Update one GroupUsers
   * const groupUsers = await prisma.groupUsers.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GroupUsersUpdateArgs>(args: Prisma.SelectSubset<T, GroupUsersUpdateArgs<ExtArgs>>): Prisma.Prisma__GroupUsersClient<runtime.Types.Result.GetResult<Prisma.$GroupUsersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more GroupUsers.
   * @param {GroupUsersDeleteManyArgs} args - Arguments to filter GroupUsers to delete.
   * @example
   * // Delete a few GroupUsers
   * const { count } = await prisma.groupUsers.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GroupUsersDeleteManyArgs>(args?: Prisma.SelectSubset<T, GroupUsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GroupUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupUsersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many GroupUsers
   * const groupUsers = await prisma.groupUsers.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GroupUsersUpdateManyArgs>(args: Prisma.SelectSubset<T, GroupUsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GroupUsers and returns the data updated in the database.
   * @param {GroupUsersUpdateManyAndReturnArgs} args - Arguments to update many GroupUsers.
   * @example
   * // Update many GroupUsers
   * const groupUsers = await prisma.groupUsers.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more GroupUsers and only return the `id`
   * const groupUsersWithIdOnly = await prisma.groupUsers.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GroupUsersUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GroupUsersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GroupUsersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one GroupUsers.
   * @param {GroupUsersUpsertArgs} args - Arguments to update or create a GroupUsers.
   * @example
   * // Update or create a GroupUsers
   * const groupUsers = await prisma.groupUsers.upsert({
   *   create: {
   *     // ... data to create a GroupUsers
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the GroupUsers we want to update
   *   }
   * })
   */
  upsert<T extends GroupUsersUpsertArgs>(args: Prisma.SelectSubset<T, GroupUsersUpsertArgs<ExtArgs>>): Prisma.Prisma__GroupUsersClient<runtime.Types.Result.GetResult<Prisma.$GroupUsersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of GroupUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupUsersCountArgs} args - Arguments to filter GroupUsers to count.
   * @example
   * // Count the number of GroupUsers
   * const count = await prisma.groupUsers.count({
   *   where: {
   *     // ... the filter for the GroupUsers we want to count
   *   }
   * })
  **/
  count<T extends GroupUsersCountArgs>(
    args?: Prisma.Subset<T, GroupUsersCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GroupUsersCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a GroupUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupUsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GroupUsersAggregateArgs>(args: Prisma.Subset<T, GroupUsersAggregateArgs>): Prisma.PrismaPromise<GetGroupUsersAggregateType<T>>

  /**
   * Group by GroupUsers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupUsersGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GroupUsersGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GroupUsersGroupByArgs['orderBy'] }
      : { orderBy?: GroupUsersGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GroupUsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the GroupUsers model
 */
readonly fields: GroupUsersFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for GroupUsers.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GroupUsersClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  group<T extends Prisma.ChatGroupDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatGroupDefaultArgs<ExtArgs>>): Prisma.Prisma__ChatGroupClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the GroupUsers model
 */
export interface GroupUsersFieldRefs {
  readonly id: Prisma.FieldRef<"GroupUsers", 'Int'>
  readonly group_id: Prisma.FieldRef<"GroupUsers", 'String'>
  readonly name: Prisma.FieldRef<"GroupUsers", 'String'>
  readonly created_at: Prisma.FieldRef<"GroupUsers", 'DateTime'>
}
    

// Custom InputTypes
/**
 * GroupUsers findUnique
 */
export type GroupUsersFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupUsers
   */
  select?: Prisma.GroupUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupUsers
   */
  omit?: Prisma.GroupUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupUsersInclude<ExtArgs> | null
  /**
   * Filter, which GroupUsers to fetch.
   */
  where: Prisma.GroupUsersWhereUniqueInput
}

/**
 * GroupUsers findUniqueOrThrow
 */
export type GroupUsersFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupUsers
   */
  select?: Prisma.GroupUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupUsers
   */
  omit?: Prisma.GroupUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupUsersInclude<ExtArgs> | null
  /**
   * Filter, which GroupUsers to fetch.
   */
  where: Prisma.GroupUsersWhereUniqueInput
}

/**
 * GroupUsers findFirst
 */
export type GroupUsersFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupUsers
   */
  select?: Prisma.GroupUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupUsers
   */
  omit?: Prisma.GroupUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupUsersInclude<ExtArgs> | null
  /**
   * Filter, which GroupUsers to fetch.
   */
  where?: Prisma.GroupUsersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GroupUsers to fetch.
   */
  orderBy?: Prisma.GroupUsersOrderByWithRelationInput | Prisma.GroupUsersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GroupUsers.
   */
  cursor?: Prisma.GroupUsersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GroupUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GroupUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GroupUsers.
   */
  distinct?: Prisma.GroupUsersScalarFieldEnum | Prisma.GroupUsersScalarFieldEnum[]
}

/**
 * GroupUsers findFirstOrThrow
 */
export type GroupUsersFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupUsers
   */
  select?: Prisma.GroupUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupUsers
   */
  omit?: Prisma.GroupUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupUsersInclude<ExtArgs> | null
  /**
   * Filter, which GroupUsers to fetch.
   */
  where?: Prisma.GroupUsersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GroupUsers to fetch.
   */
  orderBy?: Prisma.GroupUsersOrderByWithRelationInput | Prisma.GroupUsersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GroupUsers.
   */
  cursor?: Prisma.GroupUsersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GroupUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GroupUsers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GroupUsers.
   */
  distinct?: Prisma.GroupUsersScalarFieldEnum | Prisma.GroupUsersScalarFieldEnum[]
}

/**
 * GroupUsers findMany
 */
export type GroupUsersFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupUsers
   */
  select?: Prisma.GroupUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupUsers
   */
  omit?: Prisma.GroupUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupUsersInclude<ExtArgs> | null
  /**
   * Filter, which GroupUsers to fetch.
   */
  where?: Prisma.GroupUsersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GroupUsers to fetch.
   */
  orderBy?: Prisma.GroupUsersOrderByWithRelationInput | Prisma.GroupUsersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing GroupUsers.
   */
  cursor?: Prisma.GroupUsersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GroupUsers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GroupUsers.
   */
  skip?: number
  distinct?: Prisma.GroupUsersScalarFieldEnum | Prisma.GroupUsersScalarFieldEnum[]
}

/**
 * GroupUsers create
 */
export type GroupUsersCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupUsers
   */
  select?: Prisma.GroupUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupUsers
   */
  omit?: Prisma.GroupUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupUsersInclude<ExtArgs> | null
  /**
   * The data needed to create a GroupUsers.
   */
  data: Prisma.XOR<Prisma.GroupUsersCreateInput, Prisma.GroupUsersUncheckedCreateInput>
}

/**
 * GroupUsers createMany
 */
export type GroupUsersCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many GroupUsers.
   */
  data: Prisma.GroupUsersCreateManyInput | Prisma.GroupUsersCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * GroupUsers createManyAndReturn
 */
export type GroupUsersCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupUsers
   */
  select?: Prisma.GroupUsersSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GroupUsers
   */
  omit?: Prisma.GroupUsersOmit<ExtArgs> | null
  /**
   * The data used to create many GroupUsers.
   */
  data: Prisma.GroupUsersCreateManyInput | Prisma.GroupUsersCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupUsersIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * GroupUsers update
 */
export type GroupUsersUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupUsers
   */
  select?: Prisma.GroupUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupUsers
   */
  omit?: Prisma.GroupUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupUsersInclude<ExtArgs> | null
  /**
   * The data needed to update a GroupUsers.
   */
  data: Prisma.XOR<Prisma.GroupUsersUpdateInput, Prisma.GroupUsersUncheckedUpdateInput>
  /**
   * Choose, which GroupUsers to update.
   */
  where: Prisma.GroupUsersWhereUniqueInput
}

/**
 * GroupUsers updateMany
 */
export type GroupUsersUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update GroupUsers.
   */
  data: Prisma.XOR<Prisma.GroupUsersUpdateManyMutationInput, Prisma.GroupUsersUncheckedUpdateManyInput>
  /**
   * Filter which GroupUsers to update
   */
  where?: Prisma.GroupUsersWhereInput
  /**
   * Limit how many GroupUsers to update.
   */
  limit?: number
}

/**
 * GroupUsers updateManyAndReturn
 */
export type GroupUsersUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupUsers
   */
  select?: Prisma.GroupUsersSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GroupUsers
   */
  omit?: Prisma.GroupUsersOmit<ExtArgs> | null
  /**
   * The data used to update GroupUsers.
   */
  data: Prisma.XOR<Prisma.GroupUsersUpdateManyMutationInput, Prisma.GroupUsersUncheckedUpdateManyInput>
  /**
   * Filter which GroupUsers to update
   */
  where?: Prisma.GroupUsersWhereInput
  /**
   * Limit how many GroupUsers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupUsersIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * GroupUsers upsert
 */
export type GroupUsersUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupUsers
   */
  select?: Prisma.GroupUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupUsers
   */
  omit?: Prisma.GroupUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupUsersInclude<ExtArgs> | null
  /**
   * The filter to search for the GroupUsers to update in case it exists.
   */
  where: Prisma.GroupUsersWhereUniqueInput
  /**
   * In case the GroupUsers found by the `where` argument doesn't exist, create a new GroupUsers with this data.
   */
  create: Prisma.XOR<Prisma.GroupUsersCreateInput, Prisma.GroupUsersUncheckedCreateInput>
  /**
   * In case the GroupUsers was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GroupUsersUpdateInput, Prisma.GroupUsersUncheckedUpdateInput>
}

/**
 * GroupUsers delete
 */
export type GroupUsersDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupUsers
   */
  select?: Prisma.GroupUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupUsers
   */
  omit?: Prisma.GroupUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupUsersInclude<ExtArgs> | null
  /**
   * Filter which GroupUsers to delete.
   */
  where: Prisma.GroupUsersWhereUniqueInput
}

/**
 * GroupUsers deleteMany
 */
export type GroupUsersDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GroupUsers to delete
   */
  where?: Prisma.GroupUsersWhereInput
  /**
   * Limit how many GroupUsers to delete.
   */
  limit?: number
}

/**
 * GroupUsers without action
 */
export type GroupUsersDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupUsers
   */
  select?: Prisma.GroupUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupUsers
   */
  omit?: Prisma.GroupUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupUsersInclude<ExtArgs> | null
}
