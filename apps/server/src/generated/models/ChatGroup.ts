
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ChatGroup` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ChatGroup
 * 
 */
export type ChatGroupModel = runtime.Types.Result.DefaultSelection<Prisma.$ChatGroupPayload>

export type AggregateChatGroup = {
  _count: ChatGroupCountAggregateOutputType | null
  _min: ChatGroupMinAggregateOutputType | null
  _max: ChatGroupMaxAggregateOutputType | null
}

export type ChatGroupMinAggregateOutputType = {
  id: string | null
  user_id: string | null
  title: string | null
  passcode: string | null
  created_at: Date | null
}

export type ChatGroupMaxAggregateOutputType = {
  id: string | null
  user_id: string | null
  title: string | null
  passcode: string | null
  created_at: Date | null
}

export type ChatGroupCountAggregateOutputType = {
  id: number
  user_id: number
  title: number
  passcode: number
  created_at: number
  _all: number
}


export type ChatGroupMinAggregateInputType = {
  id?: true
  user_id?: true
  title?: true
  passcode?: true
  created_at?: true
}

export type ChatGroupMaxAggregateInputType = {
  id?: true
  user_id?: true
  title?: true
  passcode?: true
  created_at?: true
}

export type ChatGroupCountAggregateInputType = {
  id?: true
  user_id?: true
  title?: true
  passcode?: true
  created_at?: true
  _all?: true
}

export type ChatGroupAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatGroup to aggregate.
   */
  where?: Prisma.ChatGroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatGroups to fetch.
   */
  orderBy?: Prisma.ChatGroupOrderByWithRelationInput | Prisma.ChatGroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChatGroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatGroups.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ChatGroups
  **/
  _count?: true | ChatGroupCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChatGroupMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChatGroupMaxAggregateInputType
}

export type GetChatGroupAggregateType<T extends ChatGroupAggregateArgs> = {
      [P in keyof T & keyof AggregateChatGroup]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChatGroup[P]>
    : Prisma.GetScalarType<T[P], AggregateChatGroup[P]>
}




export type ChatGroupGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatGroupWhereInput
  orderBy?: Prisma.ChatGroupOrderByWithAggregationInput | Prisma.ChatGroupOrderByWithAggregationInput[]
  by: Prisma.ChatGroupScalarFieldEnum[] | Prisma.ChatGroupScalarFieldEnum
  having?: Prisma.ChatGroupScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChatGroupCountAggregateInputType | true
  _min?: ChatGroupMinAggregateInputType
  _max?: ChatGroupMaxAggregateInputType
}

export type ChatGroupGroupByOutputType = {
  id: string
  user_id: string
  title: string
  passcode: string
  created_at: Date
  _count: ChatGroupCountAggregateOutputType | null
  _min: ChatGroupMinAggregateOutputType | null
  _max: ChatGroupMaxAggregateOutputType | null
}

type GetChatGroupGroupByPayload<T extends ChatGroupGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChatGroupGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChatGroupGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChatGroupGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChatGroupGroupByOutputType[P]>
      }
    >
  > 



export type ChatGroupWhereInput = {
  AND?: Prisma.ChatGroupWhereInput | Prisma.ChatGroupWhereInput[]
  OR?: Prisma.ChatGroupWhereInput[]
  NOT?: Prisma.ChatGroupWhereInput | Prisma.ChatGroupWhereInput[]
  id?: Prisma.UuidFilter<"ChatGroup"> | string
  user_id?: Prisma.StringFilter<"ChatGroup"> | string
  title?: Prisma.StringFilter<"ChatGroup"> | string
  passcode?: Prisma.StringFilter<"ChatGroup"> | string
  created_at?: Prisma.DateTimeFilter<"ChatGroup"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  Chats?: Prisma.ChatsListRelationFilter
  GroupUsers?: Prisma.GroupUsersListRelationFilter
}

export type ChatGroupOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  passcode?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  Chats?: Prisma.ChatsOrderByRelationAggregateInput
  GroupUsers?: Prisma.GroupUsersOrderByRelationAggregateInput
}

export type ChatGroupWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ChatGroupWhereInput | Prisma.ChatGroupWhereInput[]
  OR?: Prisma.ChatGroupWhereInput[]
  NOT?: Prisma.ChatGroupWhereInput | Prisma.ChatGroupWhereInput[]
  user_id?: Prisma.StringFilter<"ChatGroup"> | string
  title?: Prisma.StringFilter<"ChatGroup"> | string
  passcode?: Prisma.StringFilter<"ChatGroup"> | string
  created_at?: Prisma.DateTimeFilter<"ChatGroup"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  Chats?: Prisma.ChatsListRelationFilter
  GroupUsers?: Prisma.GroupUsersListRelationFilter
}, "id">

export type ChatGroupOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  passcode?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  _count?: Prisma.ChatGroupCountOrderByAggregateInput
  _max?: Prisma.ChatGroupMaxOrderByAggregateInput
  _min?: Prisma.ChatGroupMinOrderByAggregateInput
}

export type ChatGroupScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChatGroupScalarWhereWithAggregatesInput | Prisma.ChatGroupScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChatGroupScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChatGroupScalarWhereWithAggregatesInput | Prisma.ChatGroupScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"ChatGroup"> | string
  user_id?: Prisma.StringWithAggregatesFilter<"ChatGroup"> | string
  title?: Prisma.StringWithAggregatesFilter<"ChatGroup"> | string
  passcode?: Prisma.StringWithAggregatesFilter<"ChatGroup"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"ChatGroup"> | Date | string
}

export type ChatGroupCreateInput = {
  id?: string
  title: string
  passcode: string
  created_at?: Date | string
  user: Prisma.UserCreateNestedOneWithoutChatGroupsInput
  Chats?: Prisma.ChatsCreateNestedManyWithoutGroupInput
  GroupUsers?: Prisma.GroupUsersCreateNestedManyWithoutGroupInput
}

export type ChatGroupUncheckedCreateInput = {
  id?: string
  user_id: string
  title: string
  passcode: string
  created_at?: Date | string
  Chats?: Prisma.ChatsUncheckedCreateNestedManyWithoutGroupInput
  GroupUsers?: Prisma.GroupUsersUncheckedCreateNestedManyWithoutGroupInput
}

export type ChatGroupUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  passcode?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutChatGroupsNestedInput
  Chats?: Prisma.ChatsUpdateManyWithoutGroupNestedInput
  GroupUsers?: Prisma.GroupUsersUpdateManyWithoutGroupNestedInput
}

export type ChatGroupUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  passcode?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Chats?: Prisma.ChatsUncheckedUpdateManyWithoutGroupNestedInput
  GroupUsers?: Prisma.GroupUsersUncheckedUpdateManyWithoutGroupNestedInput
}

export type ChatGroupCreateManyInput = {
  id?: string
  user_id: string
  title: string
  passcode: string
  created_at?: Date | string
}

export type ChatGroupUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  passcode?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatGroupUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  passcode?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatGroupListRelationFilter = {
  every?: Prisma.ChatGroupWhereInput
  some?: Prisma.ChatGroupWhereInput
  none?: Prisma.ChatGroupWhereInput
}

export type ChatGroupOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ChatGroupCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  passcode?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type ChatGroupMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  passcode?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type ChatGroupMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  passcode?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type ChatGroupScalarRelationFilter = {
  is?: Prisma.ChatGroupWhereInput
  isNot?: Prisma.ChatGroupWhereInput
}

export type ChatGroupCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ChatGroupCreateWithoutUserInput, Prisma.ChatGroupUncheckedCreateWithoutUserInput> | Prisma.ChatGroupCreateWithoutUserInput[] | Prisma.ChatGroupUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ChatGroupCreateOrConnectWithoutUserInput | Prisma.ChatGroupCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ChatGroupCreateManyUserInputEnvelope
  connect?: Prisma.ChatGroupWhereUniqueInput | Prisma.ChatGroupWhereUniqueInput[]
}

export type ChatGroupUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ChatGroupCreateWithoutUserInput, Prisma.ChatGroupUncheckedCreateWithoutUserInput> | Prisma.ChatGroupCreateWithoutUserInput[] | Prisma.ChatGroupUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ChatGroupCreateOrConnectWithoutUserInput | Prisma.ChatGroupCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ChatGroupCreateManyUserInputEnvelope
  connect?: Prisma.ChatGroupWhereUniqueInput | Prisma.ChatGroupWhereUniqueInput[]
}

export type ChatGroupUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ChatGroupCreateWithoutUserInput, Prisma.ChatGroupUncheckedCreateWithoutUserInput> | Prisma.ChatGroupCreateWithoutUserInput[] | Prisma.ChatGroupUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ChatGroupCreateOrConnectWithoutUserInput | Prisma.ChatGroupCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ChatGroupUpsertWithWhereUniqueWithoutUserInput | Prisma.ChatGroupUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ChatGroupCreateManyUserInputEnvelope
  set?: Prisma.ChatGroupWhereUniqueInput | Prisma.ChatGroupWhereUniqueInput[]
  disconnect?: Prisma.ChatGroupWhereUniqueInput | Prisma.ChatGroupWhereUniqueInput[]
  delete?: Prisma.ChatGroupWhereUniqueInput | Prisma.ChatGroupWhereUniqueInput[]
  connect?: Prisma.ChatGroupWhereUniqueInput | Prisma.ChatGroupWhereUniqueInput[]
  update?: Prisma.ChatGroupUpdateWithWhereUniqueWithoutUserInput | Prisma.ChatGroupUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ChatGroupUpdateManyWithWhereWithoutUserInput | Prisma.ChatGroupUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ChatGroupScalarWhereInput | Prisma.ChatGroupScalarWhereInput[]
}

export type ChatGroupUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ChatGroupCreateWithoutUserInput, Prisma.ChatGroupUncheckedCreateWithoutUserInput> | Prisma.ChatGroupCreateWithoutUserInput[] | Prisma.ChatGroupUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ChatGroupCreateOrConnectWithoutUserInput | Prisma.ChatGroupCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ChatGroupUpsertWithWhereUniqueWithoutUserInput | Prisma.ChatGroupUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ChatGroupCreateManyUserInputEnvelope
  set?: Prisma.ChatGroupWhereUniqueInput | Prisma.ChatGroupWhereUniqueInput[]
  disconnect?: Prisma.ChatGroupWhereUniqueInput | Prisma.ChatGroupWhereUniqueInput[]
  delete?: Prisma.ChatGroupWhereUniqueInput | Prisma.ChatGroupWhereUniqueInput[]
  connect?: Prisma.ChatGroupWhereUniqueInput | Prisma.ChatGroupWhereUniqueInput[]
  update?: Prisma.ChatGroupUpdateWithWhereUniqueWithoutUserInput | Prisma.ChatGroupUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ChatGroupUpdateManyWithWhereWithoutUserInput | Prisma.ChatGroupUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ChatGroupScalarWhereInput | Prisma.ChatGroupScalarWhereInput[]
}

export type ChatGroupCreateNestedOneWithoutGroupUsersInput = {
  create?: Prisma.XOR<Prisma.ChatGroupCreateWithoutGroupUsersInput, Prisma.ChatGroupUncheckedCreateWithoutGroupUsersInput>
  connectOrCreate?: Prisma.ChatGroupCreateOrConnectWithoutGroupUsersInput
  connect?: Prisma.ChatGroupWhereUniqueInput
}

export type ChatGroupUpdateOneRequiredWithoutGroupUsersNestedInput = {
  create?: Prisma.XOR<Prisma.ChatGroupCreateWithoutGroupUsersInput, Prisma.ChatGroupUncheckedCreateWithoutGroupUsersInput>
  connectOrCreate?: Prisma.ChatGroupCreateOrConnectWithoutGroupUsersInput
  upsert?: Prisma.ChatGroupUpsertWithoutGroupUsersInput
  connect?: Prisma.ChatGroupWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChatGroupUpdateToOneWithWhereWithoutGroupUsersInput, Prisma.ChatGroupUpdateWithoutGroupUsersInput>, Prisma.ChatGroupUncheckedUpdateWithoutGroupUsersInput>
}

export type ChatGroupCreateNestedOneWithoutChatsInput = {
  create?: Prisma.XOR<Prisma.ChatGroupCreateWithoutChatsInput, Prisma.ChatGroupUncheckedCreateWithoutChatsInput>
  connectOrCreate?: Prisma.ChatGroupCreateOrConnectWithoutChatsInput
  connect?: Prisma.ChatGroupWhereUniqueInput
}

export type ChatGroupUpdateOneRequiredWithoutChatsNestedInput = {
  create?: Prisma.XOR<Prisma.ChatGroupCreateWithoutChatsInput, Prisma.ChatGroupUncheckedCreateWithoutChatsInput>
  connectOrCreate?: Prisma.ChatGroupCreateOrConnectWithoutChatsInput
  upsert?: Prisma.ChatGroupUpsertWithoutChatsInput
  connect?: Prisma.ChatGroupWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChatGroupUpdateToOneWithWhereWithoutChatsInput, Prisma.ChatGroupUpdateWithoutChatsInput>, Prisma.ChatGroupUncheckedUpdateWithoutChatsInput>
}

export type ChatGroupCreateWithoutUserInput = {
  id?: string
  title: string
  passcode: string
  created_at?: Date | string
  Chats?: Prisma.ChatsCreateNestedManyWithoutGroupInput
  GroupUsers?: Prisma.GroupUsersCreateNestedManyWithoutGroupInput
}

export type ChatGroupUncheckedCreateWithoutUserInput = {
  id?: string
  title: string
  passcode: string
  created_at?: Date | string
  Chats?: Prisma.ChatsUncheckedCreateNestedManyWithoutGroupInput
  GroupUsers?: Prisma.GroupUsersUncheckedCreateNestedManyWithoutGroupInput
}

export type ChatGroupCreateOrConnectWithoutUserInput = {
  where: Prisma.ChatGroupWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatGroupCreateWithoutUserInput, Prisma.ChatGroupUncheckedCreateWithoutUserInput>
}

export type ChatGroupCreateManyUserInputEnvelope = {
  data: Prisma.ChatGroupCreateManyUserInput | Prisma.ChatGroupCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ChatGroupUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ChatGroupWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatGroupUpdateWithoutUserInput, Prisma.ChatGroupUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ChatGroupCreateWithoutUserInput, Prisma.ChatGroupUncheckedCreateWithoutUserInput>
}

export type ChatGroupUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ChatGroupWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatGroupUpdateWithoutUserInput, Prisma.ChatGroupUncheckedUpdateWithoutUserInput>
}

export type ChatGroupUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ChatGroupScalarWhereInput
  data: Prisma.XOR<Prisma.ChatGroupUpdateManyMutationInput, Prisma.ChatGroupUncheckedUpdateManyWithoutUserInput>
}

export type ChatGroupScalarWhereInput = {
  AND?: Prisma.ChatGroupScalarWhereInput | Prisma.ChatGroupScalarWhereInput[]
  OR?: Prisma.ChatGroupScalarWhereInput[]
  NOT?: Prisma.ChatGroupScalarWhereInput | Prisma.ChatGroupScalarWhereInput[]
  id?: Prisma.UuidFilter<"ChatGroup"> | string
  user_id?: Prisma.StringFilter<"ChatGroup"> | string
  title?: Prisma.StringFilter<"ChatGroup"> | string
  passcode?: Prisma.StringFilter<"ChatGroup"> | string
  created_at?: Prisma.DateTimeFilter<"ChatGroup"> | Date | string
}

export type ChatGroupCreateWithoutGroupUsersInput = {
  id?: string
  title: string
  passcode: string
  created_at?: Date | string
  user: Prisma.UserCreateNestedOneWithoutChatGroupsInput
  Chats?: Prisma.ChatsCreateNestedManyWithoutGroupInput
}

export type ChatGroupUncheckedCreateWithoutGroupUsersInput = {
  id?: string
  user_id: string
  title: string
  passcode: string
  created_at?: Date | string
  Chats?: Prisma.ChatsUncheckedCreateNestedManyWithoutGroupInput
}

export type ChatGroupCreateOrConnectWithoutGroupUsersInput = {
  where: Prisma.ChatGroupWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatGroupCreateWithoutGroupUsersInput, Prisma.ChatGroupUncheckedCreateWithoutGroupUsersInput>
}

export type ChatGroupUpsertWithoutGroupUsersInput = {
  update: Prisma.XOR<Prisma.ChatGroupUpdateWithoutGroupUsersInput, Prisma.ChatGroupUncheckedUpdateWithoutGroupUsersInput>
  create: Prisma.XOR<Prisma.ChatGroupCreateWithoutGroupUsersInput, Prisma.ChatGroupUncheckedCreateWithoutGroupUsersInput>
  where?: Prisma.ChatGroupWhereInput
}

export type ChatGroupUpdateToOneWithWhereWithoutGroupUsersInput = {
  where?: Prisma.ChatGroupWhereInput
  data: Prisma.XOR<Prisma.ChatGroupUpdateWithoutGroupUsersInput, Prisma.ChatGroupUncheckedUpdateWithoutGroupUsersInput>
}

export type ChatGroupUpdateWithoutGroupUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  passcode?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutChatGroupsNestedInput
  Chats?: Prisma.ChatsUpdateManyWithoutGroupNestedInput
}

export type ChatGroupUncheckedUpdateWithoutGroupUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  passcode?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Chats?: Prisma.ChatsUncheckedUpdateManyWithoutGroupNestedInput
}

export type ChatGroupCreateWithoutChatsInput = {
  id?: string
  title: string
  passcode: string
  created_at?: Date | string
  user: Prisma.UserCreateNestedOneWithoutChatGroupsInput
  GroupUsers?: Prisma.GroupUsersCreateNestedManyWithoutGroupInput
}

export type ChatGroupUncheckedCreateWithoutChatsInput = {
  id?: string
  user_id: string
  title: string
  passcode: string
  created_at?: Date | string
  GroupUsers?: Prisma.GroupUsersUncheckedCreateNestedManyWithoutGroupInput
}

export type ChatGroupCreateOrConnectWithoutChatsInput = {
  where: Prisma.ChatGroupWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatGroupCreateWithoutChatsInput, Prisma.ChatGroupUncheckedCreateWithoutChatsInput>
}

export type ChatGroupUpsertWithoutChatsInput = {
  update: Prisma.XOR<Prisma.ChatGroupUpdateWithoutChatsInput, Prisma.ChatGroupUncheckedUpdateWithoutChatsInput>
  create: Prisma.XOR<Prisma.ChatGroupCreateWithoutChatsInput, Prisma.ChatGroupUncheckedCreateWithoutChatsInput>
  where?: Prisma.ChatGroupWhereInput
}

export type ChatGroupUpdateToOneWithWhereWithoutChatsInput = {
  where?: Prisma.ChatGroupWhereInput
  data: Prisma.XOR<Prisma.ChatGroupUpdateWithoutChatsInput, Prisma.ChatGroupUncheckedUpdateWithoutChatsInput>
}

export type ChatGroupUpdateWithoutChatsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  passcode?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutChatGroupsNestedInput
  GroupUsers?: Prisma.GroupUsersUpdateManyWithoutGroupNestedInput
}

export type ChatGroupUncheckedUpdateWithoutChatsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  passcode?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  GroupUsers?: Prisma.GroupUsersUncheckedUpdateManyWithoutGroupNestedInput
}

export type ChatGroupCreateManyUserInput = {
  id?: string
  title: string
  passcode: string
  created_at?: Date | string
}

export type ChatGroupUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  passcode?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Chats?: Prisma.ChatsUpdateManyWithoutGroupNestedInput
  GroupUsers?: Prisma.GroupUsersUpdateManyWithoutGroupNestedInput
}

export type ChatGroupUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  passcode?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Chats?: Prisma.ChatsUncheckedUpdateManyWithoutGroupNestedInput
  GroupUsers?: Prisma.GroupUsersUncheckedUpdateManyWithoutGroupNestedInput
}

export type ChatGroupUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  passcode?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ChatGroupCountOutputType
 */

export type ChatGroupCountOutputType = {
  Chats: number
  GroupUsers: number
}

export type ChatGroupCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Chats?: boolean | ChatGroupCountOutputTypeCountChatsArgs
  GroupUsers?: boolean | ChatGroupCountOutputTypeCountGroupUsersArgs
}

/**
 * ChatGroupCountOutputType without action
 */
export type ChatGroupCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroupCountOutputType
   */
  select?: Prisma.ChatGroupCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ChatGroupCountOutputType without action
 */
export type ChatGroupCountOutputTypeCountChatsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatsWhereInput
}

/**
 * ChatGroupCountOutputType without action
 */
export type ChatGroupCountOutputTypeCountGroupUsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GroupUsersWhereInput
}


export type ChatGroupSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  title?: boolean
  passcode?: boolean
  created_at?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Chats?: boolean | Prisma.ChatGroup$ChatsArgs<ExtArgs>
  GroupUsers?: boolean | Prisma.ChatGroup$GroupUsersArgs<ExtArgs>
  _count?: boolean | Prisma.ChatGroupCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chatGroup"]>

export type ChatGroupSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  title?: boolean
  passcode?: boolean
  created_at?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chatGroup"]>

export type ChatGroupSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  title?: boolean
  passcode?: boolean
  created_at?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chatGroup"]>

export type ChatGroupSelectScalar = {
  id?: boolean
  user_id?: boolean
  title?: boolean
  passcode?: boolean
  created_at?: boolean
}

export type ChatGroupOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "user_id" | "title" | "passcode" | "created_at", ExtArgs["result"]["chatGroup"]>
export type ChatGroupInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  Chats?: boolean | Prisma.ChatGroup$ChatsArgs<ExtArgs>
  GroupUsers?: boolean | Prisma.ChatGroup$GroupUsersArgs<ExtArgs>
  _count?: boolean | Prisma.ChatGroupCountOutputTypeDefaultArgs<ExtArgs>
}
export type ChatGroupIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ChatGroupIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ChatGroupPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ChatGroup"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    Chats: Prisma.$ChatsPayload<ExtArgs>[]
    GroupUsers: Prisma.$GroupUsersPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    user_id: string
    title: string
    passcode: string
    created_at: Date
  }, ExtArgs["result"]["chatGroup"]>
  composites: {}
}

export type ChatGroupGetPayload<S extends boolean | null | undefined | ChatGroupDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChatGroupPayload, S>

export type ChatGroupCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChatGroupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChatGroupCountAggregateInputType | true
  }

export interface ChatGroupDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatGroup'], meta: { name: 'ChatGroup' } }
  /**
   * Find zero or one ChatGroup that matches the filter.
   * @param {ChatGroupFindUniqueArgs} args - Arguments to find a ChatGroup
   * @example
   * // Get one ChatGroup
   * const chatGroup = await prisma.chatGroup.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChatGroupFindUniqueArgs>(args: Prisma.SelectSubset<T, ChatGroupFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChatGroupClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ChatGroup that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChatGroupFindUniqueOrThrowArgs} args - Arguments to find a ChatGroup
   * @example
   * // Get one ChatGroup
   * const chatGroup = await prisma.chatGroup.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChatGroupFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChatGroupFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatGroupClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatGroup that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupFindFirstArgs} args - Arguments to find a ChatGroup
   * @example
   * // Get one ChatGroup
   * const chatGroup = await prisma.chatGroup.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChatGroupFindFirstArgs>(args?: Prisma.SelectSubset<T, ChatGroupFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChatGroupClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatGroup that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupFindFirstOrThrowArgs} args - Arguments to find a ChatGroup
   * @example
   * // Get one ChatGroup
   * const chatGroup = await prisma.chatGroup.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChatGroupFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChatGroupFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatGroupClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ChatGroups that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ChatGroups
   * const chatGroups = await prisma.chatGroup.findMany()
   * 
   * // Get first 10 ChatGroups
   * const chatGroups = await prisma.chatGroup.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chatGroupWithIdOnly = await prisma.chatGroup.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChatGroupFindManyArgs>(args?: Prisma.SelectSubset<T, ChatGroupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ChatGroup.
   * @param {ChatGroupCreateArgs} args - Arguments to create a ChatGroup.
   * @example
   * // Create one ChatGroup
   * const ChatGroup = await prisma.chatGroup.create({
   *   data: {
   *     // ... data to create a ChatGroup
   *   }
   * })
   * 
   */
  create<T extends ChatGroupCreateArgs>(args: Prisma.SelectSubset<T, ChatGroupCreateArgs<ExtArgs>>): Prisma.Prisma__ChatGroupClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ChatGroups.
   * @param {ChatGroupCreateManyArgs} args - Arguments to create many ChatGroups.
   * @example
   * // Create many ChatGroups
   * const chatGroup = await prisma.chatGroup.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChatGroupCreateManyArgs>(args?: Prisma.SelectSubset<T, ChatGroupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ChatGroups and returns the data saved in the database.
   * @param {ChatGroupCreateManyAndReturnArgs} args - Arguments to create many ChatGroups.
   * @example
   * // Create many ChatGroups
   * const chatGroup = await prisma.chatGroup.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ChatGroups and only return the `id`
   * const chatGroupWithIdOnly = await prisma.chatGroup.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ChatGroupCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ChatGroupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ChatGroup.
   * @param {ChatGroupDeleteArgs} args - Arguments to delete one ChatGroup.
   * @example
   * // Delete one ChatGroup
   * const ChatGroup = await prisma.chatGroup.delete({
   *   where: {
   *     // ... filter to delete one ChatGroup
   *   }
   * })
   * 
   */
  delete<T extends ChatGroupDeleteArgs>(args: Prisma.SelectSubset<T, ChatGroupDeleteArgs<ExtArgs>>): Prisma.Prisma__ChatGroupClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ChatGroup.
   * @param {ChatGroupUpdateArgs} args - Arguments to update one ChatGroup.
   * @example
   * // Update one ChatGroup
   * const chatGroup = await prisma.chatGroup.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChatGroupUpdateArgs>(args: Prisma.SelectSubset<T, ChatGroupUpdateArgs<ExtArgs>>): Prisma.Prisma__ChatGroupClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ChatGroups.
   * @param {ChatGroupDeleteManyArgs} args - Arguments to filter ChatGroups to delete.
   * @example
   * // Delete a few ChatGroups
   * const { count } = await prisma.chatGroup.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChatGroupDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChatGroupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChatGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ChatGroups
   * const chatGroup = await prisma.chatGroup.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChatGroupUpdateManyArgs>(args: Prisma.SelectSubset<T, ChatGroupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChatGroups and returns the data updated in the database.
   * @param {ChatGroupUpdateManyAndReturnArgs} args - Arguments to update many ChatGroups.
   * @example
   * // Update many ChatGroups
   * const chatGroup = await prisma.chatGroup.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ChatGroups and only return the `id`
   * const chatGroupWithIdOnly = await prisma.chatGroup.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ChatGroupUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ChatGroupUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ChatGroup.
   * @param {ChatGroupUpsertArgs} args - Arguments to update or create a ChatGroup.
   * @example
   * // Update or create a ChatGroup
   * const chatGroup = await prisma.chatGroup.upsert({
   *   create: {
   *     // ... data to create a ChatGroup
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ChatGroup we want to update
   *   }
   * })
   */
  upsert<T extends ChatGroupUpsertArgs>(args: Prisma.SelectSubset<T, ChatGroupUpsertArgs<ExtArgs>>): Prisma.Prisma__ChatGroupClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ChatGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupCountArgs} args - Arguments to filter ChatGroups to count.
   * @example
   * // Count the number of ChatGroups
   * const count = await prisma.chatGroup.count({
   *   where: {
   *     // ... the filter for the ChatGroups we want to count
   *   }
   * })
  **/
  count<T extends ChatGroupCountArgs>(
    args?: Prisma.Subset<T, ChatGroupCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChatGroupCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ChatGroup.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChatGroupAggregateArgs>(args: Prisma.Subset<T, ChatGroupAggregateArgs>): Prisma.PrismaPromise<GetChatGroupAggregateType<T>>

  /**
   * Group by ChatGroup.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChatGroupGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChatGroupGroupByArgs['orderBy'] }
      : { orderBy?: ChatGroupGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChatGroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ChatGroup model
 */
readonly fields: ChatGroupFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ChatGroup.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChatGroupClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  Chats<T extends Prisma.ChatGroup$ChatsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatGroup$ChatsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  GroupUsers<T extends Prisma.ChatGroup$GroupUsersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatGroup$GroupUsersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GroupUsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ChatGroup model
 */
export interface ChatGroupFieldRefs {
  readonly id: Prisma.FieldRef<"ChatGroup", 'String'>
  readonly user_id: Prisma.FieldRef<"ChatGroup", 'String'>
  readonly title: Prisma.FieldRef<"ChatGroup", 'String'>
  readonly passcode: Prisma.FieldRef<"ChatGroup", 'String'>
  readonly created_at: Prisma.FieldRef<"ChatGroup", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ChatGroup findUnique
 */
export type ChatGroupFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroup
   */
  select?: Prisma.ChatGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroup
   */
  omit?: Prisma.ChatGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupInclude<ExtArgs> | null
  /**
   * Filter, which ChatGroup to fetch.
   */
  where: Prisma.ChatGroupWhereUniqueInput
}

/**
 * ChatGroup findUniqueOrThrow
 */
export type ChatGroupFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroup
   */
  select?: Prisma.ChatGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroup
   */
  omit?: Prisma.ChatGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupInclude<ExtArgs> | null
  /**
   * Filter, which ChatGroup to fetch.
   */
  where: Prisma.ChatGroupWhereUniqueInput
}

/**
 * ChatGroup findFirst
 */
export type ChatGroupFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroup
   */
  select?: Prisma.ChatGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroup
   */
  omit?: Prisma.ChatGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupInclude<ExtArgs> | null
  /**
   * Filter, which ChatGroup to fetch.
   */
  where?: Prisma.ChatGroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatGroups to fetch.
   */
  orderBy?: Prisma.ChatGroupOrderByWithRelationInput | Prisma.ChatGroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatGroups.
   */
  cursor?: Prisma.ChatGroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatGroups.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatGroups.
   */
  distinct?: Prisma.ChatGroupScalarFieldEnum | Prisma.ChatGroupScalarFieldEnum[]
}

/**
 * ChatGroup findFirstOrThrow
 */
export type ChatGroupFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroup
   */
  select?: Prisma.ChatGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroup
   */
  omit?: Prisma.ChatGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupInclude<ExtArgs> | null
  /**
   * Filter, which ChatGroup to fetch.
   */
  where?: Prisma.ChatGroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatGroups to fetch.
   */
  orderBy?: Prisma.ChatGroupOrderByWithRelationInput | Prisma.ChatGroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatGroups.
   */
  cursor?: Prisma.ChatGroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatGroups.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatGroups.
   */
  distinct?: Prisma.ChatGroupScalarFieldEnum | Prisma.ChatGroupScalarFieldEnum[]
}

/**
 * ChatGroup findMany
 */
export type ChatGroupFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroup
   */
  select?: Prisma.ChatGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroup
   */
  omit?: Prisma.ChatGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupInclude<ExtArgs> | null
  /**
   * Filter, which ChatGroups to fetch.
   */
  where?: Prisma.ChatGroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatGroups to fetch.
   */
  orderBy?: Prisma.ChatGroupOrderByWithRelationInput | Prisma.ChatGroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ChatGroups.
   */
  cursor?: Prisma.ChatGroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatGroups.
   */
  skip?: number
  distinct?: Prisma.ChatGroupScalarFieldEnum | Prisma.ChatGroupScalarFieldEnum[]
}

/**
 * ChatGroup create
 */
export type ChatGroupCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroup
   */
  select?: Prisma.ChatGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroup
   */
  omit?: Prisma.ChatGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupInclude<ExtArgs> | null
  /**
   * The data needed to create a ChatGroup.
   */
  data: Prisma.XOR<Prisma.ChatGroupCreateInput, Prisma.ChatGroupUncheckedCreateInput>
}

/**
 * ChatGroup createMany
 */
export type ChatGroupCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ChatGroups.
   */
  data: Prisma.ChatGroupCreateManyInput | Prisma.ChatGroupCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ChatGroup createManyAndReturn
 */
export type ChatGroupCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroup
   */
  select?: Prisma.ChatGroupSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroup
   */
  omit?: Prisma.ChatGroupOmit<ExtArgs> | null
  /**
   * The data used to create many ChatGroups.
   */
  data: Prisma.ChatGroupCreateManyInput | Prisma.ChatGroupCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ChatGroup update
 */
export type ChatGroupUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroup
   */
  select?: Prisma.ChatGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroup
   */
  omit?: Prisma.ChatGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupInclude<ExtArgs> | null
  /**
   * The data needed to update a ChatGroup.
   */
  data: Prisma.XOR<Prisma.ChatGroupUpdateInput, Prisma.ChatGroupUncheckedUpdateInput>
  /**
   * Choose, which ChatGroup to update.
   */
  where: Prisma.ChatGroupWhereUniqueInput
}

/**
 * ChatGroup updateMany
 */
export type ChatGroupUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ChatGroups.
   */
  data: Prisma.XOR<Prisma.ChatGroupUpdateManyMutationInput, Prisma.ChatGroupUncheckedUpdateManyInput>
  /**
   * Filter which ChatGroups to update
   */
  where?: Prisma.ChatGroupWhereInput
  /**
   * Limit how many ChatGroups to update.
   */
  limit?: number
}

/**
 * ChatGroup updateManyAndReturn
 */
export type ChatGroupUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroup
   */
  select?: Prisma.ChatGroupSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroup
   */
  omit?: Prisma.ChatGroupOmit<ExtArgs> | null
  /**
   * The data used to update ChatGroups.
   */
  data: Prisma.XOR<Prisma.ChatGroupUpdateManyMutationInput, Prisma.ChatGroupUncheckedUpdateManyInput>
  /**
   * Filter which ChatGroups to update
   */
  where?: Prisma.ChatGroupWhereInput
  /**
   * Limit how many ChatGroups to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ChatGroup upsert
 */
export type ChatGroupUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroup
   */
  select?: Prisma.ChatGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroup
   */
  omit?: Prisma.ChatGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupInclude<ExtArgs> | null
  /**
   * The filter to search for the ChatGroup to update in case it exists.
   */
  where: Prisma.ChatGroupWhereUniqueInput
  /**
   * In case the ChatGroup found by the `where` argument doesn't exist, create a new ChatGroup with this data.
   */
  create: Prisma.XOR<Prisma.ChatGroupCreateInput, Prisma.ChatGroupUncheckedCreateInput>
  /**
   * In case the ChatGroup was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChatGroupUpdateInput, Prisma.ChatGroupUncheckedUpdateInput>
}

/**
 * ChatGroup delete
 */
export type ChatGroupDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroup
   */
  select?: Prisma.ChatGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroup
   */
  omit?: Prisma.ChatGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupInclude<ExtArgs> | null
  /**
   * Filter which ChatGroup to delete.
   */
  where: Prisma.ChatGroupWhereUniqueInput
}

/**
 * ChatGroup deleteMany
 */
export type ChatGroupDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatGroups to delete
   */
  where?: Prisma.ChatGroupWhereInput
  /**
   * Limit how many ChatGroups to delete.
   */
  limit?: number
}

/**
 * ChatGroup.Chats
 */
export type ChatGroup$ChatsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chats
   */
  select?: Prisma.ChatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chats
   */
  omit?: Prisma.ChatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatsInclude<ExtArgs> | null
  where?: Prisma.ChatsWhereInput
  orderBy?: Prisma.ChatsOrderByWithRelationInput | Prisma.ChatsOrderByWithRelationInput[]
  cursor?: Prisma.ChatsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChatsScalarFieldEnum | Prisma.ChatsScalarFieldEnum[]
}

/**
 * ChatGroup.GroupUsers
 */
export type ChatGroup$GroupUsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupUsers
   */
  select?: Prisma.GroupUsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupUsers
   */
  omit?: Prisma.GroupUsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupUsersInclude<ExtArgs> | null
  where?: Prisma.GroupUsersWhereInput
  orderBy?: Prisma.GroupUsersOrderByWithRelationInput | Prisma.GroupUsersOrderByWithRelationInput[]
  cursor?: Prisma.GroupUsersWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.GroupUsersScalarFieldEnum | Prisma.GroupUsersScalarFieldEnum[]
}

/**
 * ChatGroup without action
 */
export type ChatGroupDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroup
   */
  select?: Prisma.ChatGroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroup
   */
  omit?: Prisma.ChatGroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupInclude<ExtArgs> | null
}
